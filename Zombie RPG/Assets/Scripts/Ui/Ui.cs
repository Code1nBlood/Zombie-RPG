using UnityEngine;
using UnityEngine.SceneManagement;
using UnityEngine.UIElements;

public class Ui : MonoBehaviour
{
    [SerializeField] private VisualTreeAsset mainMenuUxml;
    [SerializeField] private VisualTreeAsset inventoryUxml;
    [SerializeField] private VisualTreeAsset contractsUxml;
    [SerializeField] private VisualTreeAsset contractCardUxml;

    private VisualElement mainMenu;
    private VisualElement inventoryWindow;
    private UIDocument uiDocument;
    private VisualElement contractsWindow;
    private Button paidRefreshButton; 

    void OnEnable()
    {
        uiDocument = GetComponent<UIDocument>();
        uiDocument.rootVisualElement.Clear();

        // –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        mainMenu = mainMenuUxml.Instantiate();
        uiDocument.rootVisualElement.Add(mainMenu);

        var btnInventory = mainMenu.Q<Button>("btnInventory");
        btnInventory.clicked += OpenInventory;

        var btnContracts = mainMenu.Q<Button>("btnContracts");
        if (btnContracts != null)
            btnContracts.clicked += OpenContracts;

        var btnScene1 = mainMenu.Q<Button>("btnPlay");
        if (btnScene1 != null)
            btnScene1.clicked += OpenScene1;
    }

    private void OpenInventory()
    {
        if (inventoryWindow == null)
        {
            inventoryWindow = inventoryUxml.Instantiate();
            inventoryWindow.style.flexGrow = 1;

            var closeButton = inventoryWindow.Q<Button>("CloseButton");
            if (closeButton != null)
                closeButton.clicked += CloseInventory;
        }

        uiDocument.rootVisualElement.Clear();
        uiDocument.rootVisualElement.Add(inventoryWindow);
    }

    private void CloseInventory()
    {
        uiDocument.rootVisualElement.Clear();
        uiDocument.rootVisualElement.Add(mainMenu);
    }

    private void OpenScene1()
    {
        SceneManager.LoadScene("Scenes/SampleScene");
    }

    private void OpenContracts()
{
    if (contractsWindow == null)
    {
        contractsWindow = contractsUxml.Instantiate();
        contractsWindow.style.flexGrow = 1;

        var closeButton = contractsWindow.Q<Button>("closeButton");
        if (closeButton != null)
            closeButton.clicked += CloseContracts;

        // üî• –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–ª–∞—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        paidRefreshButton = contractsWindow.Q<Button>("paidRefreshButton");
        if (paidRefreshButton != null)
            paidRefreshButton.clicked += OnPaidRefreshClicked;

        PopulateContractCards();
    }

    uiDocument.rootVisualElement.Clear();
    uiDocument.rootVisualElement.Add(contractsWindow);
}

    private void CloseContracts()
    {
        uiDocument.rootVisualElement.Clear();
        uiDocument.rootVisualElement.Add(mainMenu);
    }
    
    private void OnPaidRefreshClicked()
{
    Debug.Log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '–û–±–Ω–æ–≤–∏—Ç—å –∑–∞ 100 –∫–æ–Ω—Ç—Ä–∞–∫—Ç-–∫–æ–π–Ω–æ–≤'");

}

    private void PopulateContractCards()
{
    var container = contractsWindow.Q<VisualElement>("contractsContainer");

    container.Clear();

    // –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ 
    var contracts = new[]
    {
        new { Name = "–£–±–∏—Ç—å 10 –∑–æ–º–±–∏ –≤ –≥–æ–ª–æ–≤—É", Desc = "–¢–æ—á–Ω–æ—Å—Ç—å —Ä–µ—à–∞–µ—Ç –≤—Å—ë.", Reward = "–£–±–∏–π—Ü–∞", Cost = 50 },
        new { Name = "–£–±–∏—Ç—å 3 –∑–æ–º–±–∏ –ø–æ–¥—Ä—è–¥ –±–µ–∑ –ø—Ä–æ–º–∞—Ö–∞", Desc = "–¶–µ–ø–ª—è–π –∫–æ–º–±–æ!", Reward = "–°—Ç—Ä–µ–ª–æ–∫", Cost = 80 },
        new { Name = "–ü–µ—Ä–µ–∂–∏—Ç—å 5 —Ä–∞–∑ —Å HP ‚â§ 10", Desc = "–ù–∞ –≥—Ä–∞–Ω–∏ –∂–∏–∑–Ω–∏ –∏ —Å–º–µ—Ä—Ç–∏.", Reward = "–í—ã–∂–∏–≤–∞–ª—å—â–∏–∫", Cost = 120 }
    };

    foreach (var c in contracts)
    {
        // —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ø–∏–∏ UI-—ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ Instantiate –∏–∑ VisualTreeAsset
        var card = contractCardUxml.Instantiate();
        
        card.style.width = new StyleLength(250);
        card.style.height = new StyleLength(400);
        card.style.marginRight = new StyleLength(10); 
        card.style.marginLeft = new StyleLength(10); 
        
        card.style.flexGrow = 0; 
        card.style.flexShrink = 0; 

        var nameLabel = card.Q<Label>("contractName");
        var descLabel = card.Q<Label>("contractDescription");
        var rewardLabel = card.Q<Label>("contractReward");
        var buyButton = card.Q<Button>("buyButton");

        nameLabel.text = c.Name;
        descLabel.text = c.Desc;
        rewardLabel.text = c.Reward;
        buyButton.text = $"–ö–£–ü–ò–¢–¨ –ó–ê {c.Cost} –ö–ö";

        buyButton.clicked += () =>
        {
            Debug.Log($"–ü–æ–∫—É–ø–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {c.Name}");
            // –ó–¥–µ—Å—å ‚Äî –ª–æ–≥–∏–∫–∞ –ø–æ–∫—É–ø–∫–∏ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ö–ö, –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∏ —Ç.–¥.)
        };

        container.Add(card);
    }
}
}
